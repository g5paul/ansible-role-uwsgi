# CLI version: uwsgi --http-socket :8080 --plugin python --wsgi-file bin/django.wsgi
# Load this ini with:  uwsgi uwsgi.ini &
[uwsgi]
wsgi-file = {{ wsgi_file }}
{% if venv == 'true' %}
# set PYTHONHOME/virtualenv (full path)
virtualenv  = {{ virtual_env }}
{% endif %}
#http-socket = 127.0.0.1:8080
# plugin = python        # For platform, uwsgi was installed with PIP, so "python" is embedded. uncommenting will give an error
daemonize = /var/log/uwsgi/uwsgi.log
socket = /var/run/uwsgi/uwsgi.sock
processes = {{ ansible_processor_vcpus|default(ansible_processor_count) }}
threads = 200
stats = /var/run/uwsgi/uwsgi-stats.sock
memory-report = true
chmod-socket = 777
master = true
vacuum = true
die-on-term = true
pidfile = /var/run/uwsgi/uwsgi.pid
buffer-size = 32768

# BEGIN: https://www.techatbloomberg.com/blog/configuring-uwsgi-production-deployment/
#strict = true
#master = true
#enable-threads = true
#vacuum = true                          ; Delete sockets during shutdown
#single-interpreter = true
#die-on-term = true                     ; Shutdown when receiving SIGTERM (default is respawn)
#need-app = true
#disable-logging = true
#log-4xx = true
#log-5xx = true
# Restart workers after this many requests
max-requests = 1000           
# Restart workers after this many seconds
max-worker-lifetime = 86400   
# Restart workers after this much resident memory
reload-on-rss = 2048          
# How long to wait before forcefully killing workers
worker-reload-mercy = 60      
procname-prefix = "{{ uwsgi_procname_prefix }} "
# END:

# Apache-compatible logs:
#log-format = %(addr) - %(user) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"
# Auto-reload when codebase changes (not recommended for production!)
{% if deploy_environ == 'dev' %}
py-autoreload = 1
{% endif %}
